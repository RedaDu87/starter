name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mariadb:
        image: mariadb:10.5
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: securecapita
          MYSQL_USER: delta
          MYSQL_PASSWORD: delta
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Java & Maven
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Give execute permission to mvnw
        working-directory: ./backend
        run: chmod +x mvnw

      - name: Build Angular frontend
        working-directory: ./frontend
        run: |
          npm install
          npm run build 

      - name: Build Docker images
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/securecapita-backend ./backend
          docker build -t ${{ secrets.DOCKER_USERNAME }}/securecapita-frontend ./frontend

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker images
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/securecapita-backend
          docker push ${{ secrets.DOCKER_USERNAME }}/securecapita-frontend

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install SSH client
        run: sudo apt-get install -y sshpass

      - name: Deploy to remote server via SSH
        env:
          SSHPASS: ${{ secrets.SSH_PASS }}
        run: |
          sshpass -e ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << EOF
            docker login -u "${{ secrets.DOCKER_USERNAME }}" -p "${{ secrets.DOCKER_PASSWORD }}"
            cd /home/${{ secrets.SSH_USER }}/securecapita
            git pull origin main
          
            docker compose pull
            docker compose down
            docker compose up -d --build
          EOF
